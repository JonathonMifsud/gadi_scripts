#!/bin/bash
###############################################################################################################
#                                            BatchArtemisSRAMiner                                             #
#                                                JCO Mifsud                                                   #
#                                                   2024                                                      #
###############################################################################################################

#PBS -N logan_clustering
#PBS -M  # <-- will be set by setup.sh
#PBS -m abe

module load mmseqs2/15-6f452  

# Set the input path to where the contigs will be stored
inpath="/scratch/$root_project/$project/logan_contigs/"
tmp_dir="/scratch/$root_project/$project/tmp"  # Set a temporary directory for MMseqs2
mmseqs_db_dir="/scratch/$root_project/$project/mmseqs_db"

# Check if the directories exist, if not create them
mkdir -p "$inpath"
mkdir -p "$tmp_dir"
mkdir -p "$mmseqs_db_dir"

# Navigate to the input directory
cd "$inpath" || exit

# Ensure the $file_of_accessions variable is set and the file exists
if [ -z "$file_of_accessions" ] || [ ! -f "$file_of_accessions" ]; then
    echo "Error: file_of_accessions variable is not set or the file does not exist."
    exit 1
fi

# Read in the list of accessions from the provided file
readarray -t myarray <"$file_of_accessions"

# Set the output file name based on the accession file provided by the -f flag
output_file="${file_of_accessions##*/}.contigs.fa"
output_file_filtered="${output_file%.fa}.filtered.fa"

# Initialize an empty array to hold the existing contig files
files_to_cat=()

# Loop through each accession and collect the paths of existing contig files
for library_id in "${myarray[@]}"; do
    contig_file="${inpath}${library_id}.contigs.fa"
    if [ -f "$contig_file" ]; then
        files_to_cat+=("$contig_file")
    else
        echo "Warning: Contigs file for $library_id not found."
    fi
done

# Check if any contig files were found
if [ "${#files_to_cat[@]}" -eq 0 ]; then
    echo "Error: No contig files were found. Exiting."
    exit 1
fi

# Concatenate all existing contig files at once
cat "${files_to_cat[@]}" > "$output_file"

echo "Concatenation complete! Combined FASTA saved to $output_file"

# Call the Python script with appropriate arguments
python3 /project/"$root_project"/"$project"/scripts/filter_fasta_by_length.py "$output_file" "$output_file_filtered" "100" "None"


# Convert the concatenated FASTA to an MMseqs2 database
mmseqs_db="$mmseqs_db_dir/$(basename "$output_file_filtered" .fa)"
mmseqs createdb "$output_file_filtered" "$mmseqs_db"
echo "Database creation complete!"

# Perform clustering at 80% sequence identity
cluster_db="${mmseqs_db}_clu"
mmseqs linclust "$mmseqs_db" "$cluster_db" "$tmp_dir" --split-memory-limit 400G --min-seq-id 0.6 --cluster-mode 2 --cov-mode 1 -c 0.6 
echo "Clustering complete!"

mmseqs createtsv "$mmseqs_db" "$mmseqs_db" "$cluster_db" "${cluster_db}.tsv"
mmseqs createsubdb "$cluster_db" "$mmseqs_db" "${cluster_db}_rep"
mmseqs convert2fasta "${cluster_db}_rep" "${cluster_db}.clustered.contigs.fa"   

if [ $? -eq 0 ]; then
    echo "Clustering complete! Clustered FASTA saved to ${cluster_db}.clustered.contigs.fa"
else
    echo "Error: Clustering failed."
    exit 1
fi

rm -rf "$tmp_dir"

