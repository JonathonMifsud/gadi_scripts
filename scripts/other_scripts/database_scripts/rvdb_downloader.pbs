#!/bin/bash
#PBS -P fo27
#PBS -N RVDB_Download
#PBS -q copyq
#PBS -l ncpus=1
#PBS -l mem=8GB
#PBS -l walltime=04:00:00
#PBS -l storage=gdata/fo27+scratch/fo27
#PBS -o /g/data/fo27/databases/logs/rvdb_download.out
#PBS -e /g/data/fo27/databases/logs/rvdb_download.err

# ------------------------------------------------------------------------------
# RVDB Downloader
#
# This script downloads a new version of the RVDB protein FASTA file from Pasteur,
# along with NCBI prot.accession2taxid and taxonomy dump files.
# If the version is newer than what exists locally, it schedules the builder PBS job.
#
# Optional skip flags (can be set as environment variables or with #PBS -v):
#   SKIP_FASTA=1       → Skip downloading and decompressing the FASTA
#   SKIP_ACCESSION=1   → Skip downloading and extracting accession2taxid.gz
#   SKIP_TAXDUMP=1     → Skip downloading and unpacking the NCBI taxonomy dump
#   SKIP_QSUB=1        → Skip submitting the RVDB builder PBS job
#   SKIP_MAPPING=1     → Pass to builder: skip taxonomy mapping
#   SKIP_BUILD=1       → Pass to builder: skip DIAMOND makedb
#   SKIP_VERIFY=1      → Pass to builder: skip DIAMOND dbinfo check
#
# Examples:
#   qsub -v SKIP_FASTA=1,SKIP_QSUB=1 rvdb_downloader.pbs
#   export SKIP_MAPPING=1 SKIP_BUILD=1; qsub rvdb_downloader.pbs
# ------------------------------------------------------------------------------

set -euo pipefail
trap 'echo "ERROR: Failed at line $LINENO." >&2' ERR

# ------------------------------------------------------------------------------
# Configuration
# ------------------------------------------------------------------------------
temp_dir="/scratch/fo27/rvdb_temp"
db_root="/g/data/fo27/databases/blast/rvdb"
version_file="$db_root/rvdb_current_version"
build_flag_file="$db_root/next_build_version"
pbs_build_script="/g/data/fo27/databases/scripts/rvdb_builder.pbs"
today=$(date +%b-%Y)

# ------------------------------------------------------------------------------
# Validations
# ------------------------------------------------------------------------------
echo "[INFO] Starting RVDB downloader job..."

for tool in wget curl xz qsub gzip; do
    command -v "$tool" >/dev/null 2>&1 || { echo "[ERROR] Required tool '$tool' is not available in PATH."; exit 1; }
done

[[ -d "$db_root" ]] || { echo "[ERROR] Database root directory does not exist: $db_root"; exit 1; }
[[ -f "$pbs_build_script" ]] || { echo "[ERROR] Build PBS script not found: $pbs_build_script"; exit 1; }

mkdir -p "$temp_dir"
cd "$temp_dir"

# ------------------------------------------------------------------------------
# Version check
# ------------------------------------------------------------------------------
rvdb_current_version=0
if [[ -f "$version_file" ]]; then
    read -r rvdb_current_version < "$version_file"
    [[ "$rvdb_current_version" =~ ^[0-9]+$ ]] || { echo "[ERROR] Invalid version value in $version_file"; exit 1; }
fi

rvdb_new_version=$((rvdb_current_version + 1))
url="https://rvdb-prot.pasteur.fr/files/U-RVDBv${rvdb_new_version}.0-prot.fasta.xz"
versioned_dir="$db_root/RVDB.prot.v${rvdb_new_version}.${today}"
fasta_xz="$versioned_dir/U-RVDBv${rvdb_new_version}.0-prot.${today}.fasta.xz"
fasta_out="${fasta_xz%.xz}"

# ------------------------------------------------------------------------------
# Skip if version already exists
# ------------------------------------------------------------------------------
existing_dir=$(find "$db_root" -maxdepth 1 -type d -name "RVDB.prot.v${rvdb_new_version}.*" | head -n 1)
if [[ -n "$existing_dir" ]]; then
    for file in "$existing_dir"/U-RVDBv${rvdb_new_version}.0-prot.*.fasta; do
        if [[ -f "$file" ]]; then
            echo "[INFO] RVDB version v${rvdb_new_version} already exists at: $existing_dir"
            echo "[INFO] Skipping download and build job."
            rm -f "$build_flag_file"
            exit 0
        fi
    done
fi

# ------------------------------------------------------------------------------
# Check remote availability
# ------------------------------------------------------------------------------
echo "[INFO] Checking availability of v${rvdb_new_version} at: $url"
if curl -s --head "$url" | grep -q "200 OK"; then
    echo "[INFO] New version detected. Preparing $versioned_dir"
    mkdir -p "$versioned_dir"

    # ------------------------------------------------------------------------------
    # FASTA
    # ------------------------------------------------------------------------------
    if [[ "${SKIP_FASTA:-0}" -eq 1 ]]; then
        echo "[INFO] Skipping FASTA download/decompression (SKIP_FASTA=1)"
    else
        echo "[INFO] Downloading and decompressing FASTA..."
        rm -f "$fasta_xz" "$fasta_out"
        wget -q --timeout=600 "$url" -O "$fasta_xz"
        [[ -s "$fasta_xz" ]] || { echo "[ERROR] FASTA download failed or empty."; exit 1; }

        if ! xz -T0 -d "$fasta_xz"; then
            echo "[ERROR] Failed to decompress FASTA."
            exit 1
        fi

        [[ -s "$fasta_out" ]] || { echo "[ERROR] FASTA output missing after decompression."; exit 1; }
        echo "[INFO] FASTA successfully written to: $fasta_out"
    fi

    # ------------------------------------------------------------------------------
    # prot.accession2taxid
    # ------------------------------------------------------------------------------
    if [[ "${SKIP_ACCESSION:-0}" -eq 1 ]]; then
        echo "[INFO] Skipping accession2taxid download (SKIP_ACCESSION=1)"
    else
        echo "[INFO] Downloading prot.accession2taxid..."
        accession_url="https://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/prot.accession2taxid.gz"
        accession_gz="$temp_dir/prot.accession2taxid.gz"

        rm -f "$accession_gz"
        wget --timeout=600 "$accession_url" -O "$accession_gz"
        [[ -s "$accession_gz" ]] || { echo "[ERROR] accession2taxid.gz is missing or empty."; exit 1; }

        echo "[INFO] Decompressing accession2taxid..."
        if ! gunzip -c "$accession_gz" > "$versioned_dir/prot.accession2taxid.${today}"; then
            echo "[ERROR] Failed to decompress accession2taxid.gz"
            exit 1
        fi
        rm -f "$accession_gz"

        [[ -s "$versioned_dir/prot.accession2taxid.${today}" ]] || {
            echo "[ERROR] Decompressed accession2taxid file is empty."
            exit 1
        }
        echo "[INFO] accession2taxid written to: $versioned_dir/prot.accession2taxid.${today}"
    fi

    # ------------------------------------------------------------------------------
    # Taxdump
    # ------------------------------------------------------------------------------
    if [[ "${SKIP_TAXDUMP:-0}" -eq 1 ]]; then
        echo "[INFO] Skipping taxdump download (SKIP_TAXDUMP=1)"
    else
        echo "[INFO] Downloading NCBI taxdump..."
        taxdump_dir="$temp_dir/taxdump_dl"
        rm -rf "$taxdump_dir"
        mkdir -p "$taxdump_dir"
        cd "$taxdump_dir"

        wget -q "https://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz"
        tar -xzf taxdump.tar.gz nodes.dmp names.dmp
        mv nodes.dmp names.dmp "$versioned_dir/"
        cd "$temp_dir"
        rm -rf "$taxdump_dir"
    fi

    # ------------------------------------------------------------------------------
    # Submit builder with forwarded SKIP flags
    # ------------------------------------------------------------------------------
    echo "$rvdb_new_version" > "$build_flag_file"

    if [[ "${SKIP_QSUB:-0}" -eq 1 ]]; then
        echo "[INFO] Skipping PBS build submission (SKIP_QSUB=1)"
    else
        echo "[INFO] Submitting build job with any applicable skip flags..."

        builder_flags=""
        [[ "${SKIP_MAPPING:-0}" -eq 1 ]] && builder_flags+=",SKIP_MAPPING=1"
        [[ "${SKIP_BUILD:-0}"   -eq 1 ]] && builder_flags+=",SKIP_BUILD=1"
        [[ "${SKIP_VERIFY:-0}"  -eq 1 ]] && builder_flags+=",SKIP_VERIFY=1"
        builder_flags="${builder_flags#,}"  # strip leading comma

        if [[ -n "$builder_flags" ]]; then
            echo "[INFO] Forwarding builder flags: $builder_flags"
            qsub -v "$builder_flags" "$pbs_build_script"
        else
            qsub "$pbs_build_script"
        fi

        echo "[INFO] Build job submitted successfully."
    fi

else
    echo "[INFO] No new version available at $url."
    rm -f "$build_flag_file"
fi
