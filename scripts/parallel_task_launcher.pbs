#!/bin/bash

############################################################################################################
# Script Name: parallel_task_launcher.pbs
# Author: JCO Mifsud jonathon.mifsud1@gmail.com
# Description: Generic PBS job launcher for flexible parallel execution of single- and multi-core tasks.
# GitHub: https://github.com/JonathonMifsud/gadi_scripts
############################################################################################################

set -euo pipefail
trap 'echo "❌ ERROR: Unexpected failure at line $LINENO. Exiting." >&2' ERR

# --- PBS Job Configuration ---
#PBS -N parallel_task
#PBS -l wd

# --- Load environment variables early ---
project="${PROJECT_NAME}" 

# --- Detect direct manual qsub of launcher ---
if [[ -z "${input_list:-}" || -z "${task_script:-}" ]]; then
  echo "⚠️ WARNING: It appears you may have manually submitted parallel_task_launcher.pbs via qsub."
  echo "⚠️ This script is designed to be launched via a run script (e.g., ./${project}_run.sh) that sets required environment variables."
  echo ""
  echo "❌ Missing variables:"
  [[ -z "${input_list:-}" ]] && echo "  - input_list"
  [[ -z "${task_script:-}" ]] && echo "  - task_script"
  echo ""
  echo "Please use the appropriate run script instead of manually submitting this file."
  exit 1
fi

# --- Job Setup ---
start_time=$(date)
log_dir="/scratch/${ROOT_PROJECT}/${USER_ID}/${PROJECT_NAME}/logs"
mkdir -p "$log_dir"

module load nci-parallel/1.0.0a

# --- Derived Variables ---
ncpus_per_task="${NCPUS_PER_TASK:-1}"
input_cmd_file="$PBS_JOBFS/parallel_cmds.txt"

# --- Validate inputs ---
if [[ ! -f "$input_list" ]]; then
  echo "❌ ERROR: Input list '$input_list' not found!" >&2
  exit 1
fi

if [[ ! -x "$task_script" ]]; then
  echo "⚠️  WARNING: Task script is not executable; will wrap in 'bash'."
fi

# --- Count tasks and compute number of MPI ranks ---
num_tasks=$(wc -l < "$input_list")
total_procs=$(( PBS_NCPUS / ncpus_per_task ))
num_waves=$(( (num_tasks + total_procs - 1) / total_procs ))

# --- Determine optimized per-task timeout ---
pbs_walltime_secs=$(qstat -f "$PBS_JOBID" | awk -F= '/Resource_List.walltime/ {
  split($2, t, ":"); print t[1]*3600 + t[2]*60 + t[3]
}')
default_timeout=$(( pbs_walltime_secs * 95 / 100 / num_waves ))
nci_timeout="${NCI_TIMEOUT:-$default_timeout}"
per_task_time_fmt=$(printf '%02d:%02d:%02d' $((nci_timeout/3600)) $(((nci_timeout%3600)/60)) $((nci_timeout%60)))

# --- Timeout Info Summary ---
echo "🧮 Optimized Timeout Calculation:"
echo "   ➤ Total tasks:             $num_tasks"
echo "   ➤ Parallel tasks (ranks):  $total_procs"
echo "   ➤ Task waves:              $num_waves"
echo "   ➤ Total PBS walltime:      ${pbs_walltime_secs} sec"
echo "   ➤ Timeout per task:        ${nci_timeout} sec (~${per_task_time_fmt})"

# --- Create input command file ---
if [[ ! -x "$task_script" ]]; then
  sed "s|^|bash $task_script |" "$input_list" > "$input_cmd_file"
else
  sed "s|^|$task_script |" "$input_list" > "$input_cmd_file"
fi

# --- Print Info ---
echo "Job started at: $start_time"
echo "User:            ${USER_ID}"
echo "Project dir:     /scratch/${ROOT_PROJECT}/${USER_ID}/${PROJECT_NAME}"
echo "Task script:     $task_script"
echo "Accession list:  $input_list"
echo "Total CPUs:      $PBS_NCPUS"
echo "CPUs per task:   $ncpus_per_task"
echo "Commands file:   $input_cmd_file"
echo "First 3 commands:"
head -n 3 "$input_cmd_file"
echo "📍 Nodefile:"
cat "$PBS_NODEFILE"
echo "Log dir:         $log_dir"
echo "PBS Job ID:      $PBS_JOBID"

# --- Sanity checks ---
if (( PBS_NCPUS % ncpus_per_task != 0 )); then
  echo "❌ ERROR: PBS_NCPUS ($PBS_NCPUS) is not divisible by NCPUS_PER_TASK ($ncpus_per_task)." >&2
  exit 1
fi

if (( total_procs < 1 )); then
  echo "❌ ERROR: Not enough CPUs to launch even one MPI rank (total_procs=$total_procs)." >&2
  exit 1
fi

if (( total_procs < PBS_NCPUS / 2 )); then
  echo -e "\033[1;33m⚠️ WARNING:\033[0m Fewer MPI ranks ($total_procs) than CPUs allocated ($PBS_NCPUS)."
  echo -e "▶️ Consider reducing NCPUS_PER_TASK or increasing task count."
fi

# --- Emit Metadata Block for .err log consumers ---
echo "----- JOB METADATA BEGIN -----" >&2
echo "ACCESSION_LIST_USED: $input_list" >&2
echo "ACCESSION_LIST_MD5: $(md5sum "$input_list" | awk '{print $1}')" >&2
echo "TASK_SCRIPT_USED: $task_script" >&2
echo "ROOT_PROJECT: ${ROOT_PROJECT}" >&2
echo "PROJECT_NAME: ${PROJECT_NAME}" >&2
echo "USER_ID: ${USER_ID}" >&2
echo "PBS_JOBID: $PBS_JOBID" >&2
echo "PBS_O_WORKDIR: $PBS_O_WORKDIR" >&2
echo "PBS_NCPUS: $PBS_NCPUS" >&2
echo "NCPUS_PER_TASK: $ncpus_per_task" >&2
echo "MPI_RANKS: $total_procs" >&2
echo "TASK_WAVES: $num_waves" >&2
echo "NCI_TIMEOUT: $nci_timeout" >&2
echo "JOB_SUBMIT_TIME: $start_time" >&2
echo "COMMAND_FILE: $input_cmd_file" >&2
echo "----- JOB METADATA END -----" >&2

# --- Launch Parallel Tasks ---
if (( ncpus_per_task > 1 )); then
  echo "🚀 Launching multi-core tasks with CPU pinning..."
  mpirun -np "$total_procs" \
         --map-by slot:PE="$ncpus_per_task" \
         nci-parallel --input-file "$input_cmd_file" --timeout "$nci_timeout" --verbose
else
  echo "🚀 Launching single-core tasks..."
  mpirun -np "$PBS_NCPUS" \
         --map-by slot \
         nci-parallel --input-file "$input_cmd_file" --timeout "$nci_timeout" --verbose
fi

# --- Completion ---
end_time=$(date)
echo "✅ Job completed at: $end_time"
echo "📦 Logs saved in: $log_dir"
