#!/bin/bash
################################################################################
# Script Name: parallel_task_launcher.pbs
# Description: Generic PBS job launcher for flexible parallel execution of 
#              single- and multi-core tasks.
################################################################################

set -euo pipefail
trap 'echo "‚ùå ERROR: Unexpected failure at line $LINENO. Exiting." >&2' ERR

# ----------------------------- PBS Directives -------------------------------
#PBS -N parallel_task
#PBS -l wd

# ------------------------ Environment Variable Check ------------------------
if [[ -z "${input_list:-}" || -z "${task_script:-}" ]]; then
  echo "‚ö†Ô∏è WARNING: This script should be launched via a run script (e.g., ./blastx_rdrp_run.sh)"
  echo ""
  echo "‚ùå Missing environment variables:"
  [[ -z "${input_list:-}" ]] && echo "  - input_list"
  [[ -z "${task_script:-}" ]] && echo "  - task_script"
  echo ""
  exit 1
fi

# ------------------------------- Setup --------------------------------------
start_time=$(date)
mkdir -p "$LOG_DIR"
module load nci-parallel/1.0.0a

# ------------------------ Derived and Default Values ------------------------
ncpus_per_task="${NCPUS_PER_TASK:-1}"
input_cmd_file="$PBS_JOBFS/parallel_cmds.txt"

# ------------------------- Input Validations -------------------------------
if [[ ! -f "$input_list" ]]; then
  echo "‚ùå ERROR: Input list '$input_list' not found!" >&2
  exit 1
fi

if [[ ! -x "$task_script" ]]; then
  echo "‚ö†Ô∏è  WARNING: Task script not executable; using 'bash' wrapper."
fi

# -------------------------- Compute Task Info ------------------------------
num_tasks=$(wc -l < "$input_list")
total_procs=$(( PBS_NCPUS / ncpus_per_task ))
num_waves=$(( (num_tasks + total_procs - 1) / total_procs ))

pbs_walltime_secs=$(qstat -f "$PBS_JOBID" | awk -F= '/Resource_List.walltime/ {
  split($2, t, ":"); print t[1]*3600 + t[2]*60 + t[3]
}')

default_timeout=$(( pbs_walltime_secs * 95 / 100 / num_waves ))
nci_timeout="${NCI_TIMEOUT:-$default_timeout}"
per_task_time_fmt=$(printf '%02d:%02d:%02d' $((nci_timeout/3600)) $(((nci_timeout%3600)/60)) $((nci_timeout%60)))

# ------------------------ Timeout Summary Log ------------------------------
echo "üßÆ Optimized Timeout Calculation:"
echo "   ‚û§ Total tasks:             $num_tasks"
echo "   ‚û§ Parallel tasks (ranks):  $total_procs"
echo "   ‚û§ Task waves:              $num_waves"
echo "   ‚û§ Total PBS walltime:      ${pbs_walltime_secs} sec"
echo "   ‚û§ Timeout per task:        ${nci_timeout} sec (~${per_task_time_fmt})"

# ------------------------ Create Command File ------------------------------
if [[ ! -x "$task_script" ]]; then
  sed "s|^|bash $task_script |" "$input_list" > "$input_cmd_file"
else
  sed "s|^|$task_script |" "$input_list" > "$input_cmd_file"
fi

# ----------------------------- Info Dump -----------------------------------
echo "Job started at:      $start_time"
echo "User:                ${USER_ID}"
echo "Task script:         $task_script"
echo "Root project:        ${ROOT_PROJECT}"
echo "Input directory:     ${INPUT_DIR}"
echo "Output directory:    ${OUTPUT_DIR}"
echo "Accession list:      $input_list"
echo "Total CPUs:          $PBS_NCPUS"
echo "CPUs per task:       $ncpus_per_task"
echo "Commands file:       $input_cmd_file"
echo "First 3 commands:"
head -n 3 "$input_cmd_file"
echo "üìç Nodefile:"
cat "$PBS_NODEFILE"
echo "Log dir:             ${LOG_DIR}"
echo "PBS Job ID:          $PBS_JOBID"

# -------------------------- Sanity Checks ----------------------------------
if (( PBS_NCPUS % ncpus_per_task != 0 )); then
  echo "‚ùå ERROR: PBS_NCPUS ($PBS_NCPUS) is not divisible by NCPUS_PER_TASK ($ncpus_per_task)." >&2
  exit 1
fi

if (( total_procs < 1 )); then
  echo "‚ùå ERROR: Not enough CPUs to launch even one MPI rank." >&2
  exit 1
fi

if (( total_procs < PBS_NCPUS / 2 )); then
  echo -e "\033[1;33m‚ö†Ô∏è WARNING:\033[0m Fewer MPI ranks ($total_procs) than allocated CPUs ($PBS_NCPUS)."
  echo -e "‚ñ∂Ô∏è Consider reducing NCPUS_PER_TASK or increasing task count."
fi

# ------------------------ Metadata for Logs --------------------------------
echo "----- JOB METADATA BEGIN -----" >&2
echo "ACCESSION_LIST_USED: $input_list" >&2
echo "ACCESSION_LIST_MD5: $(md5sum "$input_list" | awk '{print $1}')" >&2
echo "TASK_SCRIPT_USED: $task_script" >&2
echo "ROOT_PROJECT: ${ROOT_PROJECT}" >&2
echo "USER_ID: ${USER_ID}" >&2
echo "PBS_JOBID: $PBS_JOBID" >&2
echo "PBS_O_WORKDIR: $PBS_O_WORKDIR" >&2
echo "PBS_NCPUS: $PBS_NCPUS" >&2
echo "NCPUS_PER_TASK: $ncpus_per_task" >&2
echo "MPI_RANKS: $total_procs" >&2
echo "TASK_WAVES: $num_waves" >&2
echo "NCI_TIMEOUT: $nci_timeout" >&2
echo "JOB_SUBMIT_TIME: $start_time" >&2
echo "COMMAND_FILE: $input_cmd_file" >&2
echo "----- JOB METADATA END -----" >&2

# ------------------------ Task Execution -----------------------------------
if (( ncpus_per_task > 1 )); then
  echo "üöÄ Launching multi-core tasks with CPU pinning..."
  mpirun -np "$total_procs" \
         --map-by slot:PE="$ncpus_per_task" \
         nci-parallel --input-file "$input_cmd_file" --timeout "$nci_timeout" --verbose
else
  echo "üöÄ Launching single-core tasks..."
  mpirun -np "$PBS_NCPUS" \
         --map-by slot \
         nci-parallel --input-file "$input_cmd_file" --timeout "$nci_timeout" --verbose
fi

# -------------------------- Completion -------------------------------------
end_time=$(date)
echo "‚úÖ Job completed at: $end_time"
echo "üì¶ Logs saved in: ${LOG_DIR}"